//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StudentManagement
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class StudentDBEntities : DbContext
    {
        public StudentDBEntities()
            : base("name=StudentDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AcademicMark> AcademicMark { get; set; }
        public virtual DbSet<ActivityGroup> ActivityGroup { get; set; }
        public virtual DbSet<Anouncement> Anouncement { get; set; }
        public virtual DbSet<BehaviorMark> BehaviorMark { get; set; }
        public virtual DbSet<Candre> Candre { get; set; }
        public virtual DbSet<Class> Class { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<DiplomaProject> DiplomaProject { get; set; }
        public virtual DbSet<Discipline> Discipline { get; set; }
        public virtual DbSet<Exam> Exam { get; set; }
        public virtual DbSet<Faculty> Faculty { get; set; }
        public virtual DbSet<Parents> Parents { get; set; }
        public virtual DbSet<PlusFee> PlusFee { get; set; }
        public virtual DbSet<Policy> Policy { get; set; }
        public virtual DbSet<RegisterStudyUnit> RegisterStudyUnit { get; set; }
        public virtual DbSet<ScholarCondition> ScholarCondition { get; set; }
        public virtual DbSet<Scholarship> Scholarship { get; set; }
        public virtual DbSet<School> School { get; set; }
        public virtual DbSet<Semester> Semester { get; set; }
        public virtual DbSet<Student> Student { get; set; }
        public virtual DbSet<StudentUser> StudentUser { get; set; }
        public virtual DbSet<StudyFee> StudyFee { get; set; }
        public virtual DbSet<Teacher> Teacher { get; set; }
        public virtual DbSet<TeacherUser> TeacherUser { get; set; }
        public virtual DbSet<UserImage> UserImage { get; set; }
        public virtual DbSet<Users> Users { get; set; }
    
        public virtual ObjectResult<GetAcademicByID_Result> GetAcademicByID(string studentID)
        {
            var studentIDParameter = studentID != null ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAcademicByID_Result>("GetAcademicByID", studentIDParameter);
        }
    
        public virtual ObjectResult<GetActivities_Result> GetActivities(string activities)
        {
            var activitiesParameter = activities != null ?
                new ObjectParameter("Activities", activities) :
                new ObjectParameter("Activities", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActivities_Result>("GetActivities", activitiesParameter);
        }
    
        public virtual ObjectResult<GetActivityGroup_Result> GetActivityGroup(string studentID)
        {
            var studentIDParameter = studentID != null ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActivityGroup_Result>("GetActivityGroup", studentIDParameter);
        }
    
        public virtual ObjectResult<GetDetailActivity_Result> GetDetailActivity(string activitie)
        {
            var activitieParameter = activitie != null ?
                new ObjectParameter("Activitie", activitie) :
                new ObjectParameter("Activitie", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDetailActivity_Result>("GetDetailActivity", activitieParameter);
        }
    
        public virtual ObjectResult<GetDetailDisciplineByID_Result> GetDetailDisciplineByID(string disciplineID)
        {
            var disciplineIDParameter = disciplineID != null ?
                new ObjectParameter("DisciplineID", disciplineID) :
                new ObjectParameter("DisciplineID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDetailDisciplineByID_Result>("GetDetailDisciplineByID", disciplineIDParameter);
        }
    
        public virtual ObjectResult<GetDiplomaProject_Result> GetDiplomaProject(string studenID)
        {
            var studenIDParameter = studenID != null ?
                new ObjectParameter("StudenID", studenID) :
                new ObjectParameter("StudenID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDiplomaProject_Result>("GetDiplomaProject", studenIDParameter);
        }
    
        public virtual ObjectResult<GetStudentsInfoByID_Result> GetStudentsInfoByID(string studentID)
        {
            var studentIDParameter = studentID != null ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentsInfoByID_Result>("GetStudentsInfoByID", studentIDParameter);
        }
    
        public virtual ObjectResult<GetUser_Result> GetUser(string iD, string passWord)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var passWordParameter = passWord != null ?
                new ObjectParameter("PassWord", passWord) :
                new ObjectParameter("PassWord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUser_Result>("GetUser", iDParameter, passWordParameter);
        }
    
        public virtual int ChangeUserPasswork(string newPasswork, string iD)
        {
            var newPassworkParameter = newPasswork != null ?
                new ObjectParameter("newPasswork", newPasswork) :
                new ObjectParameter("newPasswork", typeof(string));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeUserPasswork", newPassworkParameter, iDParameter);
        }
    
        public virtual ObjectResult<GetUsersDetail_Result> GetUsersDetail(string studentID)
        {
            var studentIDParameter = studentID != null ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUsersDetail_Result>("GetUsersDetail", studentIDParameter);
        }
    
        public virtual int AddNewUserImage(string imagePath, byte[] imageToByte, string studentID)
        {
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            var imageToByteParameter = imageToByte != null ?
                new ObjectParameter("ImageToByte", imageToByte) :
                new ObjectParameter("ImageToByte", typeof(byte[]));
    
            var studentIDParameter = studentID != null ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewUserImage", imagePathParameter, imageToByteParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<IsDateRegister_Result> IsDateRegister()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IsDateRegister_Result>("IsDateRegister");
        }
    
        public virtual ObjectResult<GetStudentAndParentInfoByID_Result> GetStudentAndParentInfoByID(string studentID)
        {
            var studentIDParameter = studentID != null ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentAndParentInfoByID_Result>("GetStudentAndParentInfoByID", studentIDParameter);
        }
    
        public virtual int UpdateStudentProfile(string studentID, string parentName, string parentMobile, Nullable<bool> parentGender, string presentAddress, string permanentAddress, string mobile, Nullable<bool> gender)
        {
            var studentIDParameter = studentID != null ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(string));
    
            var parentNameParameter = parentName != null ?
                new ObjectParameter("ParentName", parentName) :
                new ObjectParameter("ParentName", typeof(string));
    
            var parentMobileParameter = parentMobile != null ?
                new ObjectParameter("ParentMobile", parentMobile) :
                new ObjectParameter("ParentMobile", typeof(string));
    
            var parentGenderParameter = parentGender.HasValue ?
                new ObjectParameter("ParentGender", parentGender) :
                new ObjectParameter("ParentGender", typeof(bool));
    
            var presentAddressParameter = presentAddress != null ?
                new ObjectParameter("PresentAddress", presentAddress) :
                new ObjectParameter("PresentAddress", typeof(string));
    
            var permanentAddressParameter = permanentAddress != null ?
                new ObjectParameter("PermanentAddress", permanentAddress) :
                new ObjectParameter("PermanentAddress", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStudentProfile", studentIDParameter, parentNameParameter, parentMobileParameter, parentGenderParameter, presentAddressParameter, permanentAddressParameter, mobileParameter, genderParameter);
        }
    
        public virtual ObjectResult<GetClassDetail_Result> GetClassDetail(string classID)
        {
            var classIDParameter = classID != null ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClassDetail_Result>("GetClassDetail", classIDParameter);
        }
    
        public virtual ObjectResult<GetDeparmentDetail_Result> GetDeparmentDetail(string departmentID)
        {
            var departmentIDParameter = departmentID != null ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeparmentDetail_Result>("GetDeparmentDetail", departmentIDParameter);
        }
    
        public virtual ObjectResult<GetFacultyDetail_Result> GetFacultyDetail(string facultyID)
        {
            var facultyIDParameter = facultyID != null ?
                new ObjectParameter("FacultyID", facultyID) :
                new ObjectParameter("FacultyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFacultyDetail_Result>("GetFacultyDetail", facultyIDParameter);
        }
    
        public virtual ObjectResult<GetSchooltDetail_Result> GetSchooltDetail(string schoolID)
        {
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchooltDetail_Result>("GetSchooltDetail", schoolIDParameter);
        }
    
        public virtual ObjectResult<GetListDisciplineForThisUser_Result> GetListDisciplineForThisUser(string thisUser)
        {
            var thisUserParameter = thisUser != null ?
                new ObjectParameter("ThisUser", thisUser) :
                new ObjectParameter("ThisUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListDisciplineForThisUser_Result>("GetListDisciplineForThisUser", thisUserParameter);
        }
    
        public virtual int InsertRegisterStudyUnit(string studentID, string discipline, string semesterID)
        {
            var studentIDParameter = studentID != null ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(string));
    
            var disciplineParameter = discipline != null ?
                new ObjectParameter("Discipline", discipline) :
                new ObjectParameter("Discipline", typeof(string));
    
            var semesterIDParameter = semesterID != null ?
                new ObjectParameter("SemesterID", semesterID) :
                new ObjectParameter("SemesterID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRegisterStudyUnit", studentIDParameter, disciplineParameter, semesterIDParameter);
        }
    }
}
